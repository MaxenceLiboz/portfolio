{"version":3,"sources":["images/Computer.jpg","images/Graphic.jpg","css/homeCss.js","components/Footer.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","colorButton","color","border","borderRadius","padding","fontWeight","fontFamily","Button","height","fontSize","downArrow","textAlign","margin","alt","computer","backgroundImage","Computer","width","backgroundPosition","backgroundRepeat","backgroundSize","graphic","Graphic","title","paddingTop","para","overflowWrap","padPara","Footer","Home","props","classes","homeCss","Grid","container","item","xs","className","direction","justify","spacing","style","position","bottom","sm","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ab66e91b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Computer.5afc248f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Graphic.99bf6044.jpg\";","import { makeStyles } from \"@material-ui/core/styles\";\nimport Computer from \"../images/Computer.jpg\";\nimport Graphic from \"../images/Graphic.jpg\";\n\nconst useStyles = makeStyles({\n    colorButton: {\n        color: \"white\",\n\n        border: \"solid 3px #f95a00\",\n        borderRadius: \"15px\",\n        padding: \"0 3em\",\n        fontWeight: \"bold\",\n        fontFamily: \"impact\",\n    },\n\n    Button: {\n        height: \"3em\",\n        border: \"solid 3px #000\",\n        borderRadius: \"15px\",\n        padding: \"0 3em\",\n        fontWeight: \"900\",\n        fontSize: \"1em\",\n        fontFamily: \"impact\",\n    },\n\n    downArrow: {\n        textAlign: \"center\",\n        color: \"#f95a00\",\n        fontSize: \"2em\",\n        margin: \"0\",\n    },\n\n    alt: { color: \"#f95a00\" },\n\n    computer: {\n        backgroundImage: `url(${Computer})`,\n        height: \"100vh\",\n        width: \"100%\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n    },\n\n    graphic: {\n        backgroundImage: `url(${Graphic})`,\n        height: \"80vh\",\n        width: \"100%\",\n        backgroundPosition: \"center\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundSize: \"cover\",\n    },\n\n    title: {\n        color: \"white\",\n        fontFamily: \"didot\",\n        fontSize: \"1.3em\",\n        paddingTop: \"2em\",\n    },\n\n    para: {\n        overflowWrap: \"normal\",\n        fontSize: \"1.2em\",\n        fontWeight: \"bold\",\n        color: \"white\",\n        fontFamily: \"Courier\",\n    },\n\n    padPara: {\n        paddingTop: \"4em\",\n    },\n});\n\nexport default useStyles;\n","import React from \"react\";\n\nconst Footer = () => {\n    return (\n        <>\n            <div>Footer here</div>\n        </>\n    );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport homeCss from \"../css/homeCss\";\nimport Footer from \"./Footer\";\n\nconst Home = (props) => {\n    const classes = homeCss();\n    return (\n        <>\n            <Grid container>\n                <Grid item xs={12} container className={classes.computer}>\n                    <Grid\n                        item\n                        xs={12}\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        spacing={2}\n                        className={classes.title}\n                    >\n                        <Grid item>\n                            <h1>Maxence</h1>\n                        </Grid>\n                        <Grid item>\n                            <h1 className={classes.alt}>Liboz</h1>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} container justify=\"center\">\n                        <div style={{ position: \"absolute\", bottom: \"0\" }}>\n                            <Button className={classes.colorButton}>\n                                En savoir plus\n                            </Button>\n                            <p className={classes.downArrow}>↓</p>\n                        </div>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} container className={classes.graphic}>\n                    <Grid item xs={1} sm={1} />\n                    <Grid item xs={6} sm={4}>\n                        <p className={`${classes.para} ${classes.padPara}`}>\n                            Mon but est d’aider les entreprises, petites ou\n                            grandes, à s’expandre en leur créant un site web.\n                            Cela leurs permet d’augmenter leurs visibilté et\n                            donc par adéquation leurs chiffre d’affaire.\n                        </p>\n                    </Grid>\n                    <Grid item xs={5} sm={7} />\n                    <Grid item xs={1} sm={1} />\n                    <Grid item xs={6} sm={4}>\n                        <p className={classes.para}>\n                            Venez voir mes divers projets en cliquant\n                            ci-dessous.\n                        </p>\n                    </Grid>\n                    <Grid item xs={5} sm={7} />\n                    <Grid item xs={1} sm={1} />\n                    <Grid item xs={6} sm={4} container justify=\"center\">\n                        <Button className={classes.Button}>Mes projets</Button>\n                    </Grid>\n                    <Grid item xs={5} sm={7} />\n                </Grid>\n                <Grid item xs={12}>\n                    <Footer />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default Home;\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n    return (\n        <>\n            <Home />\n        </>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}